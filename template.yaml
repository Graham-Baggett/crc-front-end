AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-resume-challenge

  SAM Template for cloud-resume-challenge

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  DomainName:
    Type: String
    Default: grahambaggett.com

Resources:
  MyWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: gb-cloud-resume
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
      - Key: "Name"
        Value: "CloudResumeChallengeWebsiteBucket"
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html

  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt MyCloudFrontDistribution.DomainName

  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      Tags:
      - Key: "Name"
        Value: "CloudResumeChallengeCertificate"

  MyCloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !Ref MyCertificate
          SslSupportMethod: sni-only
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: S3Origin
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: false
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
        Origins:
          - DomainName: !GetAtt MyWebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub ${AWS::StackName}-security-response-headers-policy
        SecurityHeadersConfig:
          ContentSecurityPolicy:
            ContentSecurityPolicy: default-src 'none'; font-src 'self' https://fonts.googleapis.com 
                                   https://cdn.jsdelivr.net https://fonts.gstatic.com; 
                                   connect-src 'self' https://r31nk3e4ck.execute-api.us-east-1.amazonaws.com; 
                                   img-src 'self' https://grahambaggett.com; script-src 'self'; base-uri 'none'; form-action 'none';
                                   style-src 'self' https://cdn.jsdelivr.net https://fonts.googleapis.com 
                                   https://grahambaggett.com; frame-ancestors 'none'; 
                                   manifest-src https://grahambaggett.com
            Override: false
          ContentTypeOptions: # automatically adds 'nosniff'
            Override: false
          FrameOptions:
            FrameOption: DENY
            Override: false
          ReferrerPolicy:
            ReferrerPolicy: no-referrer-when-downgrade
            Override: false
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Preload: true
            Override: false
          XSSProtection:
            ModeBlock: true
            Protection: true
            Override: false

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyWebsiteBucket
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource: !Sub ${MyWebsiteBucket.Arn}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${MyCloudFrontDistribution}

Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  BucketName:
    Description: 'Name of the bucket'
    Value: !Ref MyWebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  BucketDomainName:
    Description: 'Domain name of the bucket.'
    Value: !GetAtt 'MyWebsiteBucket.DomainName'
    Export:
      Name: !Sub '${AWS::StackName}-BucketDomainName'
  BucketRegionalDomainName:
    Description: 'Regional domain name of the bucket.'
    Value: !GetAtt 'MyWebsiteBucket.RegionalDomainName'
    Export:
      Name: !Sub '${AWS::StackName}-BucketRegionalDomainName'

name: Interact with OCI Environment
run-name: ${{ github.actor }} is interacting with OCI in GitHub Actions ðŸš€

on: 
  push:
    branches:
      - oci

permissions:
  contents: read

jobs:
  update-infra-and-sync-site: #updates OCI infrastructure and syncs bucket changes
    runs-on: ubuntu-latest
    environment:
      name: production
    env:
      working_directory: ./terraform
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_CLI_NAMESPACE: ${{ secrets.OCI_CLI_NAMESPACE }}
      OCI_CLI_COMPARTMENT_OCID: ${{ secrets.OCI_CLI_COMPARTMENT_OCID }}
      BRANCH_NAME: "oci"
      PROVIDER_NAME: "GitHub Source Provider (Front-End)"
      REPO_URL: "https://github.com/Graham-Baggett/crc-front-end"
      STACK_NAME: "Cloud Resume Challenge Stack"
      TF_VERSION: "1.2.x"
    #permissions:
    #  id-token: write # This is required for requesting the JWT
    steps: 
      - name: Harden Runner
        uses: step-security/harden-runner@6b3083af2869dc3314a0257a42f4af696cc79ba3 # v2.3.1
        with:
          disable-sudo: true
          egress-policy: audit
          
      - name: Configure OCI Credentials
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: find-compartment-id
        with:
          command: 'iam compartment list'
      - name: Check OCI version
        run: oci --version
      - name: Check Configuration Source Provider
        run: |
          echo "SOURCE_PROVIDER_ID=$(oci resource-manager configuration-source-provider list \
          --compartment-id ${{secrets.OCI_CLI_COMPARTMENT_OCID}} | jq '.data.items[] | select(."display-name"==env.PROVIDER_NAME).id' -r)" >> $GITHUB_ENV
      - name: Check OCI Resource Stack
        run: |
          echo "STACK_ID=$(oci resource-manager stack list --all --compartment-id $OCI_CLI_COMPARTMENT_OCID | jq '.data[] | select(."display-name"==env.STACK_NAME).id' -r)" >> $GITHUB_ENV
      - name: Create Configuration Source Provider
        if: ${{env.SOURCE_PROVIDER_ID == ''}}
        run: |
          echo "SOURCE_PROVIDER_ID=$(oci resource-manager configuration-source-provider create-github-access-token-provider \
          --access-token ${{secrets.CRC_FRONT_END_TOKEN}} \
          --api-endpoint https://github.com/ \
          --display-name "$PROVIDER_NAME" \
          --compartment-id $OCI_CLI_COMPARTMENT_OCID | jq '.data.id' -r)" >> $GITHUB_ENV
#       - name: Learn valid Terraform versions
#         run:     oci resource-manager stack list-terraform-versions --compartment-id ${{secrets.OCI_CLI_COMPARTMENT_OCID}}
#       - name: Create OCI Resource Stack
#         run: oci resource-manager stack create-from-git-provider --compartment-id ${{secrets.OCI_CLI_COMPARTMENT_OCID}} --config-source-configuration-source-provider-id $SOURCE_PROVIDER_ID --terraform-version $TF_VERSION
      - name: Create Cloud Resume Challenge Stack
        if: ${{env.STACK_ID == ''}}
        run: |
            echo "STACK_ID=$(oci resource-manager stack create-from-git-provider \
            --compartment-id ${{secrets.OCI_CLI_COMPARTMENT_OCID}} \
            --config-source-configuration-source-provider-id $SOURCE_PROVIDER_ID \
            --config-source-branch-name $BRANCH_NAME \
            --config-source-repository-url $REPO_URL \
            --display-name "$STACK_NAME" \
            --terraform-version $TF_VERSION \
            --wait-for-state SUCCEEDED | jq '.data.id' -r)" >> $GITHUB_ENV
      - name: Create Cloud Resume Challenge Plan Job
        if: ${{env.STACK_ID != ''}}
        run: |
          echo "PLAN_JOB_ID=$(oci resource-manager job create-plan-job \
            --stack-id $STACK_ID --wait-for-state SUCCEEDED | jq '.data.id' -r)" >> $GITHUB_ENV
#       - name: Get Configuration Source Provider Information
#         run: oci resource-manager configuration-source-provider get --configuration-source-provider-id ${{secrets.OCI_CLI_FRONT_END_CONFIGURATION_SOURCE_PROVIDER_OCID}}
#        - name: Check OCI compartments
#        run: oci iam compartment list
#       - name: Download repo
#         uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
#       - name: Check deployment status
#         run: aws cloudformation describe-stacks --stack-name cloud-resume-challenge || exit 1
#       - name: Copy files to the production website with the AWS CLI
#         run: |
#           aws s3 sync . s3://gb-cloud-resume --size-only --exclude='*' --include='*.html' --include='*.css' --include='*.js' --include='*.png' --include='*.ico' --include='*.webmanifest'

#       - name: Terraform init, plan and apply
#         working-directory: ${{ env.working_directory }}
#         run: |
#            echo `pwd`
#            terraform init -input=false
#            terraform plan
#            terraform apply -auto-approve
#           terraform fmt -check
#       - name: Upload Terraform state file
#         uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
#         with:
#             name: terraform.tfstate
#             path: ./terraform/global/s3/terraform.tfstate

      
#   dast-scan: #performs Dynamic Application Security Testing against the target site
#     runs-on: ubuntu-latest
#     needs: update-infra-and-sync-site
#     container:
#       image: owasp/zap2docker-stable
#       options: --user root -v ${{ github.workspace }}:/zap/wrk/:rw
#     steps:
#       - name: Harden Runner
#         uses: step-security/harden-runner@6b3083af2869dc3314a0257a42f4af696cc79ba3 # v2.3.1
#         with:
#           egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

#       - name: Run ZAP baseline scan
#         run: |
#           zap-baseline.py -t https://grahambaggett.com -r report_html.html -a || echo 0
#       - name: Upload ZAP report
#         uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
#         with:
#             name: DAST_Report.html
#             path: ./report_html.html
